//
//  SetGameViewController.m
//  Machismo
//
//  Created by Gunay Yurtsever on 17/02/13.
//  Copyright (c) 2013 Gunay Yurtsever. All rights reserved.
//

#import "SetGameViewController.h"
#import "SetMatchingGame.h"
#import "SetCardDeck.h"
#import "SetCard.h"

@interface SetGameViewController ()
@property (strong, nonatomic) IBOutletCollection(UIButton) NSArray *cardButtons;
@property (strong, nonatomic) SetMatchingGame *game;
@property (strong, nonatomic) SetCardDeck *deck;

@end

@implementation SetGameViewController

- (SetMatchingGame *) game
{
    if (!_game){
        _game = [[SetMatchingGame alloc] initWithCardCount:self.cardButtons.count
                                                  usingDeck:[[SetCardDeck alloc] init]];
    }
    
    return _game;
}

- (SetCardDeck  *) deck
{
    if (!_deck){
        _deck = [[SetCardDeck alloc] init];
        NSLog(@"initialized deck");
    }
    return _deck;
}

- (IBAction)flipCard:(UIButton *)sender
{
   // [self.game  flipCardAtIndex:[self.cardButtons indexOfObject:sender]];
   // NSLog(@"index of the button is %d", [self.cardButtons indexOfObject:sender]);
   // [self updateUI];
    SetCard *card = [self.deck drawRandomCard];
    
    NSLog(@"%@",card.symbol);
    NSLog(@"I am here");
    NSLog(@"%@",[self AttributedCardTitle:card]);

    sender.selected = !sender.isSelected;
    
}


- (void) updateUI
{
    for (UIButton *cardButton in self.cardButtons){
        SetCard *card = [self.game cardAtIndex:[self.cardButtons indexOfObject:cardButton]];
        
        [cardButton  setAttributedTitle:[self AttributedCardTitle:card] forState:UIControlStateSelected];
        [cardButton setTitle:[card contents] forState:UIControlStateSelected|UIControlStateDisabled];
        
        cardButton.selected = YES;
        cardButton.enabled = YES;
        cardButton.alpha = 1.0;
    }
}


- (NSMutableAttributedString *) AttributedCardTitle:(SetCard *) card
{
    NSMutableString *allSymbols = [[NSMutableString alloc] initWithString:card.symbol];
    for (int i = 2; i <= card.number; i++){
        [allSymbols appendString:card.symbol];
    }
    NSMutableAttributedString *dispStr = [[NSMutableAttributedString alloc] initWithString:allSymbols];
    NSRange range = NSMakeRange(0, [dispStr length]);
    float a = 1;
    NSMutableDictionary *stringAttributes = [NSMutableDictionary dictionary];    

    if ([card.shading isEqualToString:@"solid"]) {
        a = 1.0;
        [stringAttributes setObject: [card.color colorWithAlphaComponent:a]
                             forKey: NSForegroundColorAttributeName];
        
        // Set a negative width so we get both stroke and fill to show
        [stringAttributes setObject: [NSNumber numberWithFloat:-1]
                             forKey: NSStrokeWidthAttributeName];
        
    }
    else if ([card.shading isEqualToString:@"striped"]){
        a = 0.3;
        [stringAttributes setObject: [card.color colorWithAlphaComponent:a]
                             forKey: NSForegroundColorAttributeName];
        
        // Set a negative width so we get both stroke and fill to show
        [stringAttributes setObject: [NSNumber numberWithFloat:-1]
                             forKey: NSStrokeWidthAttributeName];
    }
    else if ([card.shading isEqualToString:@"open"]){
        a = 1.0;
        [stringAttributes setObject: [card.color colorWithAlphaComponent:a]
                             forKey: NSForegroundColorAttributeName];
        // Set a negative width so we get both stroke and fill to show
        
        [stringAttributes setObject: [NSNumber numberWithFloat:5]
                             forKey: NSStrokeWidthAttributeName];
    }

   [dispStr addAttributes:stringAttributes range:range];
    return dispStr;
}
 

@end
